// Package solarisapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package solarisapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// CreateLogRequest The request object to create log.
type CreateLogRequest struct {
	// Tags The log tags.
	Tags Tags `json:"tags"`
}

// CreateRecordRequest The request object to create a record.
type CreateRecordRequest struct {
	// Payload The record payload.
	Payload []byte `json:"payload"`
}

// CreateRecordsRequest The request object to create records.
type CreateRecordsRequest struct {
	// Records The list of records to be created.
	Records []CreateRecordRequest `json:"records"`
}

// DeleteLogsRequest The request object to delete logs.
type DeleteLogsRequest struct {
	// FilterCondition The filter condition.
	FilterCondition string `json:"filterCondition"`
}

// Log The log object.
type Log struct {
	// CreatedAt The timestamp when the log was created.
	CreatedAt time.Time `json:"createdAt"`

	// Id The log identifier.
	Id string `json:"id"`

	// Records The number of records in the log.
	Records int `json:"records"`

	// Tags The log tags.
	Tags Tags `json:"tags"`

	// UpdatedAt The timestamp when the log was updated (new records added or tags are applied).
	UpdatedAt time.Time `json:"updatedAt"`
}

// QueryLogsResult The response object to the query logs request.
type QueryLogsResult struct {
	// Items The list of found logs.
	Items []Log `json:"items"`

	// NextPageId The id of the next page.
	NextPageId *string `json:"nextPageId,omitempty"`

	// Total The total number of found logs.
	Total int `json:"total"`
}

// QueryRecordsRequest The request object to query records.
type QueryRecordsRequest struct {
	// Desc If true, the result returns records with ids equal to or less than fromPageId.
	Desc *bool `json:"desc,omitempty"`

	// FromPageId The fromPageId specifies from which page to start returning the results.
	FromPageId *string `json:"fromPageId,omitempty"`

	// Limit The maximum number of records per page.
	Limit *int `json:"limit,omitempty"`

	// LogIds The log ids filter. If specified, the logsFilterCondition is ignored.
	LogIds *[]string `json:"logIds,omitempty"`

	// LogsFilterCondition The logs filter condition.
	LogsFilterCondition *string `json:"logsFilterCondition,omitempty"`

	// RecsFilterCondition The records filter condition.
	RecsFilterCondition *string `json:"recsFilterCondition,omitempty"`
}

// QueryRecordsResult The response object to the query records request.
type QueryRecordsResult struct {
	// Items The list of found records.
	Items []Record `json:"items"`

	// NextPageId The id of the next page.
	NextPageId *string `json:"nextPageId,omitempty"`

	// Total The total number of found records.
	Total int `json:"total"`
}

// Record The record object.
type Record struct {
	// CreatedAt The timestamp when the record was created.
	CreatedAt time.Time `json:"createdAt"`

	// Id The record identifier.
	Id string `json:"id"`

	// LogId The log identifier.
	LogId string `json:"logId"`

	// Payload The record payload.
	Payload []byte `json:"payload"`
}

// Tags The log tags.
type Tags map[string]string

// UpdateLogRequest The request object to update log.
type UpdateLogRequest struct {
	// Tags The log tags.
	Tags Tags `json:"tags"`
}

// FilterCondition defines model for FilterCondition.
type FilterCondition = string

// FromPageId defines model for FromPageId.
type FromPageId = string

// Limit defines model for Limit.
type Limit = int

// LogId defines model for LogId.
type LogId = string

// QueryLogsParams defines parameters for QueryLogs.
type QueryLogsParams struct {
	// FilterCondition The filter condition.
	FilterCondition *FilterCondition `form:"filterCondition,omitempty" json:"filterCondition,omitempty"`

	// FromPageId The id of the page to start returning the results from.
	FromPageId *FromPageId `form:"fromPageId,omitempty" json:"fromPageId,omitempty"`

	// Limit The max number of objects to return per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeleteLogsJSONRequestBody defines body for DeleteLogs for application/json ContentType.
type DeleteLogsJSONRequestBody = DeleteLogsRequest

// CreateLogJSONRequestBody defines body for CreateLog for application/json ContentType.
type CreateLogJSONRequestBody = CreateLogRequest

// UpdateLogJSONRequestBody defines body for UpdateLog for application/json ContentType.
type UpdateLogJSONRequestBody = UpdateLogRequest

// CreateRecordsJSONRequestBody defines body for CreateRecords for application/json ContentType.
type CreateRecordsJSONRequestBody = CreateRecordsRequest

// QueryRecordsJSONRequestBody defines body for QueryRecords for application/json ContentType.
type QueryRecordsJSONRequestBody = QueryRecordsRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete logs
	// (DELETE /logs)
	DeleteLogs(c *gin.Context)
	// Query logs
	// (GET /logs)
	QueryLogs(c *gin.Context, params QueryLogsParams)
	// Create log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Update log
	// (PUT /logs/{logId})
	UpdateLog(c *gin.Context, logId LogId)
	// Create records
	// (POST /logs/{logId}/records)
	CreateRecords(c *gin.Context, logId LogId)
	// Health check
	// (GET /ping)
	Ping(c *gin.Context)
	// Query records
	// (POST /records)
	QueryRecords(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteLogs operation middleware
func (siw *ServerInterfaceWrapper) DeleteLogs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteLogs(c)
}

// QueryLogs operation middleware
func (siw *ServerInterfaceWrapper) QueryLogs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryLogsParams

	// ------------- Optional query parameter "filterCondition" -------------

	err = runtime.BindQueryParameter("form", true, false, "filterCondition", c.Request.URL.Query(), &params.FilterCondition)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filterCondition: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fromPageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromPageId", c.Request.URL.Query(), &params.FromPageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fromPageId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.QueryLogs(c, params)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateLog(c)
}

// UpdateLog operation middleware
func (siw *ServerInterfaceWrapper) UpdateLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "logId" -------------
	var logId LogId

	err = runtime.BindStyledParameter("simple", false, "logId", c.Param("logId"), &logId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateLog(c, logId)
}

// CreateRecords operation middleware
func (siw *ServerInterfaceWrapper) CreateRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "logId" -------------
	var logId LogId

	err = runtime.BindStyledParameter("simple", false, "logId", c.Param("logId"), &logId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateRecords(c, logId)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Ping(c)
}

// QueryRecords operation middleware
func (siw *ServerInterfaceWrapper) QueryRecords(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.QueryRecords(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/logs", wrapper.DeleteLogs)

	router.GET(options.BaseURL+"/logs", wrapper.QueryLogs)

	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)

	router.PUT(options.BaseURL+"/logs/:logId", wrapper.UpdateLog)

	router.POST(options.BaseURL+"/logs/:logId/records", wrapper.CreateRecords)

	router.GET(options.BaseURL+"/ping", wrapper.Ping)

	router.POST(options.BaseURL+"/records", wrapper.QueryRecords)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYzY7bNhB+FYLtoQVU22ly8i3ZIOgCOWzS5BTkwJVGElOJ1JJUHGOhdy+G1D8pW+vd",
	"LHIyLJLD+fnmmxne01iWlRQgjKb7e1oxxUowoOy/d7wwoK6kSLjhUuCnBHSseOX+0k85kNRuInG3a0Mj",
	"ynHxrgZ1pBEVrAS6p+lMWER1nEPJUKo5VrhFG8VFRpsmou+ULG9YBtdJ+FaeEJkSkwOpWAbESKINU4Yo",
	"MLUSXGR2TYGuC6NJqmS5qNdw02mV3vOSm7A2JftBRF3egkKt5O03iI1GpZw6pAJl9VzSobCiA9dzYSAD",
	"5e6X2ZI3CpkRnoAwPOWg+lsqZvLRJfZ8RBXc1VxBQvdG1XDK5qZbtGi4UsAMvJfZR7irQS+4QrnF1gno",
	"g9ieQx1RsUrJCpThYGUaltnf3xWkdE9/2w5w3LZXbz/hHtRlUPyLO/g16lR2t9EmarX8CLFUyWWKMqLs",
	"aV/bih0LyZIleXiItHvwcCpVyQzd09ujARoFIDW2qBN+zih9mVVOPe0b1S4sAIujrLQ7jfJuoRVpbeQG",
	"yrMRDMWk6c1kSrGj545OrZA73kIBFokP9UViDyIUA45IL2W703Gdiw0Z9F5my4nttvn6tlF4vWC94SVo",
	"w8qKHHIQlg5R2oHpcfx6jCbMwF94xjcoonw173hHT8Jr4MwOYLzXdCStZ8HoAYQR0bpKLnRQe5L8IeDQ",
	"q8aSBBIiFUEdCFNAWFUVHJI/1zpyhgyObGwNGtwUjcI6tiCEmg9YRFwWYJlbSgJdSaFhlAVoqS1ANhG6",
	"NPEB1uf2Mi+kshZJn0+ryACx7iV/RAX8MOsKPu7sq6mHNyMNKxYCjksjzE2VD1TcSbCsbZ38xXBcxtEu",
	"GosUjSJ8UdcpsQV81Om0/YbuMXvgJic80QTualbgVVKRArQmJmeCDL3PyAO3UhbABJqUnunChnWiK4iR",
	"BVyzRQ45j/M1vVkwiMXJVouXdRmgjnGT5ROH7X70KRrTLblvyHXam5NEHTHoWTdMuCY8E1LNCqGPyBnS",
	"A7IW1dJrCo5lj3UiO1+tK2NnIH4h6XQ6PJ53Rgmzinqc5r8U+4xMeDQBtead6k6frpdoBT5pO9HKPNNR",
	"FA+Zg7zTP7WHtxW9m7O6m8YlPRS2T21LwxKXi6y4mc5IcxPCdmMjMbJ4kP/ZNhEPn9tc8/E8cxtu4yKV",
	"VjY3Ba79KwumuH77hry+uaYR/Q5KO31fbHabHZomKxCs4nRPX252m5fW6Sa3mm2RPZ2p2PP7Rr+dzgJo",
	"HcMlxNZowmgHZtDmjUyONlekMCCsG20DGNtj22/ake4wTp9yjj/CNFNXYWm3HxyTWlP+3r06USlKZuK8",
	"q65zgicHUNDOP8nGhkXXZcnUceoK9GoGAYx86BtG31t9I2oDMLwgfQn7YNiynRetJjp/ZOhJVux2jzbN",
	"V8+TuycL5bwNt4H0Y+SKH/KlruMYtE7rYh6IwcmWqmQoWa8mzynTQPRPND8Jtd4T0CrQvniy++3s0CxS",
	"4KQYTT07eM0uWHbY3luqbuzTTh1w9ecJA05d3bPqgzHv3vEcJJ8+RB7brwrR7jlD1E61G8T4qxOUZjcL",
	"aVyrNI/oEBw/otvRq8PJLBq1X6FM+thP5b9SiIOvgeszcXkqsDViSKDHRGfqXxehCvuX/X24vlzlEP9H",
	"uGuyNajvoHDCqivCsE2uBQ6OfpxuUOYj4Rx49vYtRuXPsPc/wAqTkxgtcRafheGH+eAfKKwDCH8GmEKv",
	"Fs9MGYGp8tE1dABe0/wfAAD//0Lk7CDlGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
